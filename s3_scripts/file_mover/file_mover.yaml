AWSTemplateFormatVersion: 2010-09-09
Description: SFTP to destination folder ingestion
Parameters:
  LandingBucket:
    Type: String
    Description: The bucket where files will land and move
  NotificationEmailId:
    Type: String
    Description: The Email Id for Lambda Error
Resources:
  FileObjects:
    Type: AWS::Lambda::Function
    Properties:
      Description: React to objects landing in the bucket by adding to the job queue
      Code: lambda/
      Handler: file_mover.lambda_handler
      Runtime: python3.8
      Timeout: 120
      Environment:
        Variables:
          MAPPING_TABLE: !Ref MappingDdb
          TRANSFERLOG_TABLE: !Ref TransferLogDdb
      Role: !GetAtt FileObjectsRole.Arn
  FileObjectsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/OrganizationAccountServiceBoundariesPolicy
      Policies:
        - PolicyName: mis-dl-root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - 's3:PutObject*'
                  - 's3:DeleteObject'
                  - 's3:GetObject*'
                Resource: !Sub 'arn:aws:s3:::${LandingBucket}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                Resource:
                  - !GetAtt MappingDdb.Arn
                  - !GetAtt TransferLogDdb.Arn
  FileUploadsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-uploads
      Subscription:
        -
          Endpoint: !GetAtt FileObjects.Arn
          Protocol: lambda
  LambdaAlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-lambdaErrorAlarm
      Subscription:
        - Endpoint: !Ref NotificationEmailId
          Protocol: email
  LambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:             
        - !Ref LambdaAlarmSNSTopic 
      AlarmName: "AlarmLambdaErrors"
      AlarmDescription: "Alarm if lambda errors"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
        - Name: "FunctionName"
          Value: !Ref FileObjects
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Threshold: 1
      EvaluationPeriods: 1
      Period: 300
  FileUploadsTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource:
               - !Ref FileUploadsSnsTopic
      Topics:
        - !Ref FileUploadsSnsTopic
  
  LambdaAlarmTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource:  
              - !Ref LambdaAlarmSNSTopic
      Topics:
        - !Ref LambdaAlarmSNSTopic
  FilerSubmissionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FileObjects.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-uploads
  MappingDdb:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "SourceDir"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: "SourceDir"
          KeyType: "HASH"

  TransferLogDdb:
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "FilenameOrig"
          AttributeType: "S"
        -
          AttributeName: "FileLandingDate"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        -
          AttributeName: "FilenameOrig" 
          KeyType: "HASH"
        - 
          AttributeName: "FileLandingDate"
          KeyType: "RANGE"
